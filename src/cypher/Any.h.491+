/* This file is derived from antlr4/runtime/Cpp/runtime/src/support/Any.h (version 4.9.1+).
 * Modified by wangtao9 20210322:
 * Rename U _U_ to avoid conflict with the MACRO U in cpprestsdk.
 */
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A standard C++ class loosely modeled after boost::Any.

#pragma once

#include "antlr4-common.h"

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4521)  // 'antlrcpp::Any': multiple copy constructors specified
#endif

namespace antlrcpp {

template <class T>
using StorageType = typename std::decay<T>::type;

struct ANTLR4CPP_PUBLIC Any {
    bool isNull() const { return _ptr == nullptr; }
    bool isNotNull() const { return _ptr != nullptr; }

    Any() : _ptr(nullptr) {}

    Any(Any& that) : _ptr(that.clone()) {}

    Any(Any&& that) : _ptr(that._ptr) { that._ptr = nullptr; }

    Any(const Any& that) : _ptr(that.clone()) {}

    Any(const Any&& that) : _ptr(that.clone()) {}

    template <typename _U_>
    Any(_U_&& value) : _ptr(new Derived<StorageType<_U_>>(std::forward<_U_>(value))) {}

    template <class _U_>
    bool is() const {
        auto derived = getDerived<_U_>(false);

        return derived != nullptr;
    }

    template <class _U_>
    StorageType<_U_>& as() {
        auto derived = getDerived<_U_>(true);

        return derived->value;
    }

    template <class _U_>
    const StorageType<_U_>& as() const {
        auto derived = getDerived<_U_>(true);

        return derived->value;
    }

    template <class _U_>
    operator _U_() {
        return as<StorageType<_U_>>();
    }

    template <class _U_>
    operator const _U_() const {
        return as<const StorageType<_U_>>();
    }

    Any& operator=(const Any& a) {
        if (_ptr == a._ptr) return *this;

        auto* old_ptr = _ptr;
        _ptr = a.clone();

        if (old_ptr) delete old_ptr;

        return *this;
    }

    Any& operator=(Any&& a) {
        if (_ptr == a._ptr) return *this;

        std::swap(_ptr, a._ptr);

        return *this;
    }

    virtual ~Any();

    virtual bool equals(Any other) const { return _ptr == other._ptr; }

 private:
    struct Base {
        virtual ~Base(){};
        virtual Base* clone() const = 0;
    };

    template <typename T>
    struct Derived : Base {
        template <typename _U_>
        Derived(_U_&& value_) : value(std::forward<_U_>(value_)) {}

        T value;

        Base* clone() const { return clone<>(); }

     private:
        template <int N = 0,
                  typename std::enable_if<N == N && std::is_nothrow_copy_constructible<T>::value,
                                          int>::type = 0>
        Base* clone() const {
            return new Derived<T>(value);
        }

        template <int N = 0,
                  typename std::enable_if<N == N && !std::is_nothrow_copy_constructible<T>::value,
                                          int>::type = 0>
        Base* clone() const {
            return nullptr;
        }
    };

    Base* clone() const {
        if (_ptr)
            return _ptr->clone();
        else
            return nullptr;
    }

    /* in gcc 5.5, when compiling with -O3, there will be a link error when linking unit_test,
     * saying this function is defined in a discarded section. By specifying noinline, we can
     * work around this bug.  */
#if __GNUC__ == 5 && __GNUC_MINOR__ == 5
#define _FMA_WORK_AROUND_GCC55_DISCARD_BUG_ __attribute__((used, noinline))
#else
#define _FMA_WORK_AROUND_GCC55_DISCARD_BUG_
#endif

    template <class _U_>
    _FMA_WORK_AROUND_GCC55_DISCARD_BUG_ Derived<StorageType<_U_>>* getDerived(
        bool checkCast) const {
        typedef StorageType<_U_> T;

        auto derived = dynamic_cast<Derived<T>*>(_ptr);

        if (checkCast && !derived) throw std::bad_cast();

        return derived;
    }

    Base* _ptr;
};

template <>
inline Any::Any(std::nullptr_t&&) : _ptr(nullptr) {}

}  // namespace antlrcpp

#ifdef _MSC_VER
#pragma warning(pop)
#endif
